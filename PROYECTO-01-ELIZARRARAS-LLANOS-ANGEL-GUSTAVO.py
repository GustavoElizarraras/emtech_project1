# -*- coding: utf-8 -*-
"""sales_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QtRfSg8FwaoYdsBHRkrBpItbyl1D4pAr

# PROYECTO 1
# Autor: Elizarraras Llanos Ángel Gustavo
### Grupo: Dataton

## INTRODUCCIÓN

LifeStore es una tienda virtual que maneja una amplia gama de artículos,
recientemente, la Gerencia de ventas, se percató que la empresa tiene una
importante acumulación de inventario. Asimismo, se ha identificado una reducción
en las búsquedas de un grupo importante de productos, lo que ha redundado en
una disminución sustancial de sus ventas del último trimestre. Derivado de la situación, la Gerencia de Ventas te solicita que realices un análisis
de la rotación de productos identificando los siguientes elementos:

1. Generar un listado de los 50 productos con mayores ventas y uno con los 100 productos con mayor búsquedas.
2. Por categoría, generar un listado con los 50 productos con menores ventas y uno con los 100 productos con menores búsquedas.
3. Mostrar dos listados de 20 productos cada una, un listado para productos con las mejores reseñas y otro para las peores, considerando los productos con devolución.
4. Total de ingresos y ventas promedio mensuales, total anual y meses con más ventas al año

## DESARROLLO
"""

from lifestore_file import lifestore_products, lifestore_sales, lifestore_searches

# LOGIN
user = "user"
pasw = "pass"
while True:
    user_input = input("User: ")
    password_input = input("Password: ")
    if user == user_input and pasw == password_input:
        break
    else:
        print("wrong, try again")


"""## Productos con mayores ventas"""
ventas_por_articulo = {}
for venta in lifestore_sales:
    # El id del producto está en la posición 1 de cada venta
    id_producto = venta[1]
    # La de está en la posición -1 de cada venta
    devolucion = venta[-1]
    if id_producto not in ventas_por_articulo.keys() and devolucion == 0:
        ventas_por_articulo[id_producto] = 1
    # Caso en el que se tenga una devolución como primer registro
    elif id_producto not in ventas_por_articulo.keys() and devolucion == 1:
        ventas_por_articulo[id_producto] = -1
    elif devolucion == 0:
        ventas_por_articulo[id_producto] += 1
    elif devolucion == 1:
        ventas_por_articulo[id_producto] -= 1
# transformar a una lista de tuplas con el siguiente significado: (id, ventas)
ventas_por_articulo_tuples = list(ventas_por_articulo.items())
print(ventas_por_articulo_tuples)

orden_por_venta = sorted(ventas_por_articulo_tuples, key=lambda tup: tup[1], reverse=True)
cinco_mas_vendidos = orden_por_venta[:5]
print(cinco_mas_vendidos)

print("Los productos mas vendidos son:")
for id_producto, venta in cinco_mas_vendidos:
    # se resta 1 debido a que los id no inician de 0
    print("Total vendidos:", venta, "| Producto: ", lifestore_products[id_producto - 1][1])

"""## Productos con mayores busquedas"""

busquedas_por_id = {}
for datos_busqueda in lifestore_sales:
    # La categoria del producto está en la posición 3 de cada venta
    id_producto = datos_busqueda[1]
    if id_producto not in busquedas_por_id.keys():
        busquedas_por_id[id_producto] = 1
    else:
        busquedas_por_id[id_producto] += 1
# transformar a una lista de tuplas con el siguiente significado: (id, busquedas)
busquedas_por_articulo_tuples = list(busquedas_por_id.items())
print(busquedas_por_articulo_tuples)

orden_por_busqueda = sorted(busquedas_por_articulo_tuples, key=lambda tup: tup[1], reverse=True)
diez_mas_buscados = orden_por_busqueda[:10]
print(diez_mas_buscados)

print("Los 10 productos mas buscados son:")
for id_producto, busquedas in diez_mas_buscados:
    # se resta 1 debido a que los id no inician de 0
    print("Total busquedas:", busquedas, "| Producto: ", lifestore_products[id_producto - 1][1])

"""# Agrupacion por categorias"""

categorias = {}
for datos_del_producto in lifestore_products:
    # La categoria del producto está en la posición 3 de cada venta
    categoria = datos_del_producto[3]
    # El id producto está en la posición 0 de cada venta
    id_producto = datos_del_producto[0]
    if categoria not in categorias.keys():
        categorias[categoria] = [id_producto]
    else:
        categorias[categoria].append(id_producto)
print(categorias)

"""## Productos con menores ventas por categoria

"""

print(ventas_por_articulo)

for categoria, ids in categorias.items():
    orden_por_categoria = []
    for id_ in ids:
        if id_ not in ventas_por_articulo.keys():
            ventas_por_articulo[id_] = 0
        orden_por_categoria.append((id_, ventas_por_articulo[id_]))
    # print(categoria, orden_por_categoria)
    ventas_por_categoria = sorted(orden_por_categoria, key=lambda tup: tup[1])
    print("Para la categoria ", categoria, ", los productos menos vendidos son: ")
    for producto in ventas_por_categoria[:5]:
        print("No. de ventas: ", producto[1], "| Producto:", lifestore_products[producto[0] - 1][1])
    print("\n")

"""__Los productos que tienen -1 significa que a partir de la fecha que se tiene de registro, solo se tuvieron devoluciones__

## Productos menos buscados por categoria
"""

print(busquedas_por_id)

for categoria, ids in categorias.items():
    orden_por_categoria = []
    for id_ in ids:
        if id_ not in busquedas_por_id.keys():
            busquedas_por_id[id_] = 0
        orden_por_categoria.append((id_, busquedas_por_id[id_]))
    busquedas_por_categoria = sorted(orden_por_categoria, key=lambda tup: tup[1])
    print("Para la categoria ", categoria, ", los productos menos buscados son: ")
    for producto in busquedas_por_categoria[:5]:
        print("No. de busquedas: ", producto[1], "| Producto:", lifestore_products[producto[0] - 1][1]) 
    print("\n")

"""# Reseñas 
## Productos con mejores reseñas


"""

import statistics
reseñas_por_id = {}
for datos_reseña in lifestore_sales:
    # El id del producto está en la posición 3 de cada venta
    id_producto = datos_reseña[1]
    # La reseña del producto está en la posición 2 de cada venta
    reseña_producto = datos_reseña[2]
    if id_producto not in reseñas_por_id.keys():
        reseñas_por_id[id_producto] = [reseña_producto]
    else:
        reseñas_por_id[id_producto].append(reseña_producto)
# promedio de reseñas por articulo id
for id_ in reseñas_por_id.keys():
    reseñas_por_id[id_] = round(statistics.mean(reseñas_por_id[id_]), 2)
# transformar a una lista de tuplas con el siguiente significado: (id, promedio reseña)
reseñas_por_articulo_tuples = list(reseñas_por_id.items())
print(reseñas_por_articulo_tuples)

orden_reseñas = sorted(reseñas_por_articulo_tuples, key=lambda tup: tup[1], reverse=True)
print("Los articulos mejor calificados son:")
for producto in orden_reseñas[:10]:
    print("Calificación: ", producto[1], "| Producto:", lifestore_products[producto[0] - 1][1])

"""## Productos con peores reseñas"""

print("Los articulos peor calificados son:")
for producto in reversed(orden_reseñas[-10:]):
    print("Calificación: ", producto[1], "| Producto:", lifestore_products[producto[0] - 1][1])

"""## Ingresos anuales (totales)"""

ingresos = 0
for id_producto, vendidos in orden_por_venta:
    if vendidos <= -1:
        ingresos -= lifestore_products[id_producto - 1][2] *  vendidos
    else:
        ingresos += lifestore_products[id_producto - 1][2] * vendidos
print("Ingresos anuales = $", ingresos)

"""## Meses con más ventas"""

ventas_mes = {}
for datos_venta in lifestore_sales:
    mes = int(datos_venta[3].split("/")[1])
    if mes not in ventas_mes.keys():
        ventas_mes[mes] = 1
    else:
        ventas_mes[mes] += 1
ventas_mes_tuple = sorted(list(ventas_mes.items()), key=lambda tup: tup[1], reverse=True)
print("Los 5 meses con mayores ventas fueron: ")
for mes, ventas in ventas_mes_tuple[:5]:
    print(f"El mes {mes} tuvo {ventas} ventas")

"""Como sugerencia, basado en los datos propuestos, se deberian retirar los productos menos buscados y menos vendidos, para así liberar el inventario y poder ingresar mas objetos que suelen buscar y comprar los clientes.

# Conclusión
Al término de este proyecto pude prácticar mis habilidades en "vanilla" Python, ciclos y funciones básicas para poder realizar un análisis de ventas. Realizar una actividad de este estilo me ayudó a tener un acercamiento a la ciencia de datos.
"""